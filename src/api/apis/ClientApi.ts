/* tslint:disable */
/* eslint-disable */
/**
 * English Teacher
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Conversation,
} from '../models/index';
import {
    ConversationFromJSON,
    ConversationToJSON,
} from '../models/index';

export interface ConversationsConversationIdDeleteRequest {
    conversationId: string;
}

export interface ConversationsPostRequest {
    body?: object;
}

/**
 * ClientApi - interface
 * 
 * @export
 * @interface ClientApiInterface
 */
export interface ClientApiInterface {
    /**
     * 
     * @summary Delete conversation
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApiInterface
     */
    conversationsConversationIdDeleteRaw(requestParameters: ConversationsConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * 
     * Delete conversation
     */
    conversationsConversationIdDelete(requestParameters: ConversationsConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @summary List conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApiInterface
     */
    conversationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Conversation>>>;

    /**
     * 
     * List conversations
     */
    conversationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Conversation>>;

    /**
     * 
     * @summary Create conversation
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApiInterface
     */
    conversationsPostRaw(requestParameters: ConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * 
     * Create conversation
     */
    conversationsPost(requestParameters: ConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

}

/**
 * 
 */
export class ClientApi extends runtime.BaseAPI implements ClientApiInterface {

    /**
     * 
     * Delete conversation
     */
    async conversationsConversationIdDeleteRaw(requestParameters: ConversationsConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.conversationId === null || requestParameters.conversationId === undefined) {
            throw new runtime.RequiredError('conversationId','Required parameter requestParameters.conversationId was null or undefined when calling conversationsConversationIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations/{conversationId}`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters.conversationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * Delete conversation
     */
    async conversationsConversationIdDelete(requestParameters: ConversationsConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.conversationsConversationIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * List conversations
     */
    async conversationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Conversation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConversationFromJSON));
    }

    /**
     * 
     * List conversations
     */
    async conversationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Conversation>> {
        const response = await this.conversationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * Create conversation
     */
    async conversationsPostRaw(requestParameters: ConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * 
     * Create conversation
     */
    async conversationsPost(requestParameters: ConversationsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.conversationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
