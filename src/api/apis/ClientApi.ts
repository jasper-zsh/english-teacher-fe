/* tslint:disable */
/* eslint-disable */
/**
 * English Teacher
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientAssistant,
  Conversation,
  ConversationsPostRequest,
} from '../models/index';
import {
    ClientAssistantFromJSON,
    ClientAssistantToJSON,
    ConversationFromJSON,
    ConversationToJSON,
    ConversationsPostRequestFromJSON,
    ConversationsPostRequestToJSON,
} from '../models/index';

export interface ConversationsPostOperationRequest {
    conversationsPostRequest?: ConversationsPostRequest;
}

/**
 * ClientApi - interface
 * 
 * @export
 * @interface ClientApiInterface
 */
export interface ClientApiInterface {
    /**
     * 
     * @summary List assistants
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApiInterface
     */
    assistantsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientAssistant>>>;

    /**
     * 
     * List assistants
     */
    assistantsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientAssistant>>;

    /**
     * 
     * @summary List conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApiInterface
     */
    conversationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Conversation>>>;

    /**
     * 
     * List conversations
     */
    conversationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Conversation>>;

    /**
     * 
     * @summary Create conversation
     * @param {ConversationsPostRequest} [conversationsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApiInterface
     */
    conversationsPostRaw(requestParameters: ConversationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * 
     * Create conversation
     */
    conversationsPost(requestParameters: ConversationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

}

/**
 * 
 */
export class ClientApi extends runtime.BaseAPI implements ClientApiInterface {

    /**
     * 
     * List assistants
     */
    async assistantsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientAssistant>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assistants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientAssistantFromJSON));
    }

    /**
     * 
     * List assistants
     */
    async assistantsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientAssistant>> {
        const response = await this.assistantsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * List conversations
     */
    async conversationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Conversation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConversationFromJSON));
    }

    /**
     * 
     * List conversations
     */
    async conversationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Conversation>> {
        const response = await this.conversationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * Create conversation
     */
    async conversationsPostRaw(requestParameters: ConversationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationsPostRequestToJSON(requestParameters.conversationsPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * 
     * Create conversation
     */
    async conversationsPost(requestParameters: ConversationsPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.conversationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
