/* tslint:disable */
/* eslint-disable */
/**
 * English Teacher
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WordDefinition } from './WordDefinition';
import {
    WordDefinitionFromJSON,
    WordDefinitionFromJSONTyped,
    WordDefinitionToJSON,
} from './WordDefinition';

/**
 * 
 * @export
 * @interface WordEntry
 */
export interface WordEntry {
    /**
     * 
     * @type {string}
     * @memberof WordEntry
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof WordEntry
     */
    word: string;
    /**
     * 
     * @type {Array<WordDefinition>}
     * @memberof WordEntry
     */
    definitions: Array<WordDefinition>;
}

/**
 * Check if a given object implements the WordEntry interface.
 */
export function instanceOfWordEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "word" in value;
    isInstance = isInstance && "definitions" in value;

    return isInstance;
}

export function WordEntryFromJSON(json: any): WordEntry {
    return WordEntryFromJSONTyped(json, false);
}

export function WordEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): WordEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'word': json['word'],
        'definitions': ((json['definitions'] as Array<any>).map(WordDefinitionFromJSON)),
    };
}

export function WordEntryToJSON(value?: WordEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'word': value.word,
        'definitions': ((value.definitions as Array<any>).map(WordDefinitionToJSON)),
    };
}

