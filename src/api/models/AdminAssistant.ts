/* tslint:disable */
/* eslint-disable */
/**
 * English Teacher
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AdminAssistant
 */
export interface AdminAssistant {
    /**
     * 
     * @type {number}
     * @memberof AdminAssistant
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AdminAssistant
     */
    provider: string;
    /**
     * 
     * @type {string}
     * @memberof AdminAssistant
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AdminAssistant
     */
    prompt: string;
    /**
     * 
     * @type {string}
     * @memberof AdminAssistant
     */
    metadata?: string;
}

/**
 * Check if a given object implements the AdminAssistant interface.
 */
export function instanceOfAdminAssistant(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "provider" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "prompt" in value;

    return isInstance;
}

export function AdminAssistantFromJSON(json: any): AdminAssistant {
    return AdminAssistantFromJSONTyped(json, false);
}

export function AdminAssistantFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdminAssistant {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'provider': json['provider'],
        'name': json['name'],
        'prompt': json['prompt'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function AdminAssistantToJSON(value?: AdminAssistant | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'provider': value.provider,
        'name': value.name,
        'prompt': value.prompt,
        'metadata': value.metadata,
    };
}

